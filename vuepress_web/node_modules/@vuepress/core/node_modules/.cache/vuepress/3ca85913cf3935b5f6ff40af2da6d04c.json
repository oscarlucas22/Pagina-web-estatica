{"remainingRequest":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/vue-loader/lib/index.js??ref--1-1!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/guide/instalacion.md?vue&type=template&id=1a2c8c39&","dependencies":[{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/guide/instalacion.md","mtime":1665764472156},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/cache-loader/dist/cjs.js","mtime":1665316348781},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1665316349257},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/cache-loader/dist/cjs.js","mtime":1665316348781},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/vue-loader/lib/index.js","mtime":1665316349257},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/@vuepress/markdown-loader/index.js","mtime":1665316348721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}