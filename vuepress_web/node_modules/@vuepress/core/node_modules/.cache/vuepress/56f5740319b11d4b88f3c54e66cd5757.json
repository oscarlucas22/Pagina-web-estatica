{"remainingRequest":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/vue-loader/lib/index.js??ref--1-1!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/guide/mysql.md?vue&type=template&id=a03874e8&","dependencies":[{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/guide/mysql.md","mtime":1666806144275},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/cache-loader/dist/cjs.js","mtime":1665316348781},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1665316349257},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/cache-loader/dist/cjs.js","mtime":1665316348781},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/vue-loader/lib/index.js","mtime":1665316349257},{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/node_modules/@vuepress/markdown-loader/index.js","mtime":1665316348721}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHsKICB2YXIgX3ZtID0gdGhpcywKICAgIF9jID0gX3ZtLl9zZWxmLl9jCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJteXNxbC1lbi1kZWJpYW4tMTEtYnVsbHNleWUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI215c3FsLWVuLWRlYmlhbi0xMS1idWxsc2V5ZSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBNeVNRTCBlbiBEZWJpYW4gMTEgQnVsbHNleWUiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJpbnN0YWxhY2lvbi1kZS1teXNxbC1lbi1kZWJpYW4tMTEtYnVsbHNleWUiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luc3RhbGFjaW9uLWRlLW15c3FsLWVuLWRlYmlhbi0xMS1idWxsc2V5ZSIgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEluc3RhbGFjacOzbiBkZSBNeVNRTCBlbiBEZWJpYW4gMTEgQnVsbHNleWUiKSwKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUGFyYSBjb25zZWd1aXIgdW5hIGluc3RhbGFjacOzbiBjb3JyZWN0YSBkZWJlbW9zIGN1bXBsaXIgbG9zIHNpZ3VpZW50ZXMgcmVxdWlzaXRvczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICBhdHRyczogeyB0eXBlOiAiY2hlY2tib3giLCBuYW1lOiAidmVoaWNsZSIsIHZhbHVlOiAiQmlrZSIgfSwKICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBUZW5lciB1bmEgbWFxdWluYSBEZWJpYW4gMTEgYWN0dWFsaXphZGEiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICBhdHRyczogeyB0eXBlOiAiY2hlY2tib3giLCBuYW1lOiAidmVoaWNsZSIsIHZhbHVlOiAiQmlrZSIgfSwKICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBUZW5lciB1biB1c3VhcmlvIGNvbiBwcml2aWxlZ2lvcyBkZSBzdWRvIiksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgYXR0cnM6IHsgdHlwZTogImNoZWNrYm94IiwgbmFtZTogInZlaGljbGUiLCB2YWx1ZTogIkJpa2UiIH0sCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgVGVuZXIgYWNjZXNvIGEgaW50ZXJuZXQiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQW50ZXMgZGUgY29tZW56YXIgY29uIGxhIGluc3RhbGNpw7NuIGFjdHVhbGl6YXJlbW9zIG51ZXN0cmEgbWFxdWluYSIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3VkbyBhcHQgdXBkYXRlICYmIHN1ZG8gYXB0IHVwZ3JhZGVcbiIpXSksCiAgICAgICAgXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIkUgaW5zdGFsYW1vcyBsYXMgaGVycmFtaWVudGFzIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIFtfYygiY29kZSIsIFtfdm0uX3YoInN1ZG8gYXB0IGluc3RhbGwgLXkgZ251cGcgd2dldFxuIildKV0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJEZXNwdWVzIGRlIGVzdG8gZW1wZXphcmVtb3MgeWEgY29uIGxhIGluc3RhbGFjacOzbiBkZSBNeVNRTC4iKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDIiLAogICAgICAgIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIGlkOiAiY29uZmlndXJhY2lvbi1kZWwtcmVwb3NpdG9yaW8tZGUtbXlzcWwtcGFyYS1kZWJpYW4tMTEtYnVsbHNleWUiLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2NvbmZpZ3VyYWNpb24tZGVsLXJlcG9zaXRvcmlvLWRlLW15c3FsLXBhcmEtZGViaWFuLTExLWJ1bGxzZXllIiwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIENvbmZpZ3VyYWNpw7NuIGRlbCByZXBvc2l0b3JpbyBkZSBNeVNRTCBwYXJhIERlYmlhbiAxMSBCdWxsc2V5ZSIKICAgICAgICAgICksCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlZhbW9zIGEgdmVyIGPDs21vIGNvbmZpZ3VyYXIgZWwgcmVwb3NpdG9yaW8gb2ZpY2lhbCBkZSBNeVNRTCBTZXJ2ZXIgcGFyYSBEZWJpYW4gMTEuIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlBhcmEgbm8gdGVuZXIgcXVlIHJlZ2lzdHJhcnNlIGVuIGxhIHBhZ2luYSBkZSBteXNxbCBhcXVpIG9zIGRlam8gZWwgIgogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZGV2Lm15c3FsLmNvbS9nZXQvbXlzcWwtYXB0LWNvbmZpZ18wLjguMjItMV9hbGwuZGViIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImVubGFjZSBkZSBkZXNjYXJnYSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlVuYSB2ZXogeWEgY29uIGVsIHBhcXVldGUgZGVzY2FyZ2FkbyBwcm9jZWRlbW9zIGNvbiBsYSBpbnN0YWxhY2nDs246IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiY2QgRGVzY2FyZ2FzICYmIHN1ZG8gZHBrZyAtaSBteXNxbC1hcHQtY29uZmlnXzAuOC4yMi0xX2FsbC5kZWJcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkFsIGluc3RhbGFyc2UgZXN0ZSBwYXF1ZXRlIHNlIGxhbnphcsOhIHVuIHBlcXVlw7FvIGNvbmZpZ3VyYWRvciBlbiBtb2RvIGNvbnNvbGEgcXVlIG5vcyBtb3N0cmFyw6EgbGFzIGNhcmFjdGVyw61zdGljYXMgcXVlIG9mcmVjZSBwb3IgZGVmZWN0byBlbCBudWV2byByZXBvc2l0b3JpbzoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLy4uL2ltYWdlcy9teXNxbC8zLnBuZyIpLCBhbHQ6ICJpbWFnZSIgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTGEgcHJpbWVyYSBvcGNpw7NuIG5vcyBtdWVzdHJhIGxhIHZlcnNpw7NuIGRlIE15U1FMIHF1ZSBzZSB2YSBhIGluc3RhbGFyLCBwb3IgZGVmZWN0byBNeVNRTCBTZXJ2ZXIgOC4wLCBhdW5xdWUgc2Vyw61hIHBvc2libGUgY2FtYmlhcmxhIHBvciBNeVNRTCBDbHVzdGVyIDguMC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUG9yIGRlZmVjdG8sIGxhIHNlZ3VuZGEgb3BjacOzbiBub3MgaW5mb3JtYSBkZSBxdWUgZXN0w6EgYWN0aXZhZG8gZWwgcmVwb3NpdG9yaW8gZGUgaGVycmFtaWVudGFzIHkgY29uZWN0b3JlcywgcXVlIGVzIGxvIGRlc2VhYmxlLCBhdW5xdWUgcG9kcsOtYW1vcyBkZXNhY3RpdmFybG8uIgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlksIGZpbmFsbWVudGUsIGxhIHRlcmNlcmEgb3BjacOzbiBvZnJlY2UgdW4gcmVwb3NpdG9yaW8gZGUgc29mdHdhcmUgZW4gcHJ1ZWJhcywgZXhwZXJpbWVudGFsLCBldGMuIHF1ZSwgY29uIGJ1ZW4gY3JpdGVyaW8sIGVzdMOhIGRlc2FjdGl2YWRvIGluaWNpYWxtZW50ZSAoYXVucXVlIHNlIHB1ZWRlIGFjdGl2YXIpLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiUGFyYSBzYWxpciBkZWwgY29uZmlndXJhZG9yIHNlbGVjY2lvbmFyZW1vcyAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJPayIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiB5IGVsIGluc3RhbGFkb3IgY29uZmlndXJhcsOhIGVsIHJlcG9zaXRvcmlvIGNvbiBsb3MgdmFsb3JlcyBzZWxlY2Npb25hZG9zLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEZWJlbW9zIGFjdHVhbGl6YXIgbGEgaW5mb3JtYWNpw7NuIGRlIGxvcyByZXBvc2l0b3Jpb3MgcGFyYSBxdWUgc2UgaW5jbHV5YW4gbGFzIG51ZXZhcyBsaXN0YXMgZGUgcGFxdWV0ZXMgZGlzcG9uaWJsZXM6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJzdWRvIGFwdCB1cGRhdGUgJiYgc3VkbyBhcHQgdXBncmFkZVxuIildKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJpbnN0YWxhci1teXNxbC1lbi1kZWJpYW4tMTEiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2luc3RhbGFyLW15c3FsLWVuLWRlYmlhbi0xMSIgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBJbnN0YWxhciBNeVNRTCBlbiBEZWJpYW4gMTEiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkFob3JhIGNvbWVuemFyZW1vcyBjb24gbGEgaW5zdGFsYWNpw7NuIGRlIE15U1FMIGVuIERlYmlhbiAxMToiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJzdWRvIGFwdCBpbnN0YWxsIC15IG15c3FsLXNlcnZlclxuIildKV0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlVuYSB2ZXogZGVzY2FyZ2Fkb3MgZXN0ZSBwYXF1ZXRlIHkgc3VzIGRlcGVuZGVuY2lhcywgZHVyYW50ZSBsYSBpbnN0YWxhY2nDs24gZGUgbG9zIG1pc21vcywgc2Ugbm9zIHNvbGljaXRhcsOhIGxhIGNvbnRyYXNlw7FhIGRlbCB1c3VhcmlvIGFkbWluaXN0cmFkb3Igcm9vdCBkZSBNeVNRTDoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLy4uL2ltYWdlcy9teXNxbC81LnBuZyIpLCBhbHQ6ICJpbWFnZSIgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiU2kgZGVqYW1vcyBsYSBjb250cmFzZcOxYSBlbiBibGFuY28gc2UgdXNhcsOhIGxhIGF1dGVudGljYWNpw7NuIHBvciBzb2NrZXRzIGRlIFVuaXgsIGVzIGRlY2lyLCBzw7NsbyBlbCB1c3VhcmlvIHJvb3QgZGUgRGViaWFuIDExIG8gdXN1YXJpb3MgcHJpdmlsZWdpYWRvcyBjb24gc3VkbyBwb2Ryw6FuIGNvbmVjdGFyIGNvbW8gdXN1YXJpbyByb290IGRlIE15U1FMLiBFbiBjYW1iaW8sIHNpIGNyZWFtb3MgdW5hIGNvbnRyYXNlw7FhIHNlIHVzYXLDoSBlbCB0w61waWNvIHNpc3RlbWEgZGUgdXN1YXJpby9jb250cmFzZcOxYSBwYXJhIGFjY2VkZXIgY29tbyByb290IGEgTXlTUUwgU2VydmVyLiBEZXBlbmRlIGRlIHR1cyBuZWNlc2lkYWRlcyBvIGd1c3RvcyBlbGVnaXIgdW5vIHUgb3RybyBzaXN0ZW1hLiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFc3RlIGluc3RhbGFkb3IgdGFtYmnDqW4gbm9zIGFkdmllcnRlIGRlIGxhIGRpc3BvbmliaWxpZGFkIGRlbCBudWV2byBwbHVnaW4gbWVqb3JhZG8gZGUgYXV0ZW50aWNhY2nDs24sIHF1ZSB0aWVuZSBsYSBkZXN2ZW50YWphIGRlIG5vIHNlciBjb21wYXRpYmxlIGNvbiBjb25lY3RvcmVzIHkgY2xpZW50ZXMgYW50aWd1b3M6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi8uLi9pbWFnZXMvbXlzcWwvNi5wbmciKSwgYWx0OiAiaW1hZ2UiIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRlcm1pbmFkYSBlc3RhIHBlcXVlw7FhIGNvbmZpZ3VyYWNpw7NuIGluaWNpYWwsIGxhIGluc3RhbGFjacOzbiB0ZXJtaW5hIGNyZWFuZG8gdW4gbnVldm8gc2VydmljaW8gZW4gRGViaWFuIDExLCBlbCBzZXJ2aWNpbyBteXNxbC5zZXJ2aWNlIG8gc2ltcGxlbWVudGUgbXlzcWwsIHF1ZSBxdWVkYSBlbiBlamVjdWNpw7NuIHkgaGFiaWxpdGFkbyBwYXJhIHN1IGluaWNpbyBhdXRvbcOhdGljby4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUG9kZW1vcyBjb21wcm9iYXIgZW4gY3VhbHF1aWVyIG1vbWVudG8gZWwgZXN0YWRvIGRlIGRpY2hvIHNlcnZpY2lvIGNvbiBlbCBjb21hbmRvICIKICAgICAgICApLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigic3lzdGVtY3RsIildKSwKICAgICAgICBfdm0uX3YoIjoiKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCBbX2MoImNvZGUiLCBbX3ZtLl92KCJzeXN0ZW1jdGwgc3RhdHVzIG15c3FsXG4iKV0pXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLy4uL2ltYWdlcy9teXNxbC8xMi5wbmciKSwgYWx0OiAiaW1hZ2UiIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRhbWJpw6luIGRpc3BvbmVtb3MgZGVsIGNsaWVudGUgZGUgY29uc29sYSBteXNxbCBxdWUgcG9kZW1vcyB1dGlsaXphciBwYXJhIGNvbmVjdGFyIGFsIHNlcnZpY2lvIGNvbiBlbCB1c3VhcmlvIHJvb3QsIHNpIGVsZWdpbW9zIGVsIGFjY2VzbyBwb3Igc29ja2V0cyBkZSBVbml4OiIKICAgICAgICApLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIFtfYygiY29kZSIsIFtfdm0uX3YoInN1ZG8gbXlzcWxcbiIpXSldKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiTyBlc3BlY2lmaWNhbmRvIHVzdWFyaW8geSBjb250cmFzZcOxYToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgW19jKCJjb2RlIiwgW192bS5fdigibXlzcWwgLXUgcm9vdCAtcFxuIildKV0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi8uLi9pbWFnZXMvbXlzcWwvOC5wbmciKSwgYWx0OiAiaW1hZ2UiIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNyZWFyLXVuLXVzdWFyaW8tYWRtaW5pc3RyYWRvci1wcm9waW8iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NyZWFyLXVuLXVzdWFyaW8tYWRtaW5pc3RyYWRvci1wcm9waW8iIH0sCiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ3JlYXIgdW4gdXN1YXJpbyBhZG1pbmlzdHJhZG9yIHByb3BpbyIpLAogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFcyBwb3NpYmxlIHF1ZSBuZWNlc2l0ZXMgdW4gdXN1YXJpbyBhZG1pbmlzdHJhZG9yIGRlIE15U1FMIFNlcnZlciBjb24gYWNjZXNvIG1lZGlhbnRlIGNvbnRyYXNlw7FhIHBhcmEgY29uZWN0YXIgYWwgc2VydmljaW8gZGVzZGUgYXBsaWNhY2lvbmVzLCBnZXN0b3JlcywgY2xpZW50ZXMgZ3LDoWZpY29zLCBjb25leGlvbmVzIHJlbW90YXMsIGV0Yy4gZGVqYW5kbyBhbCB1c3VhcmlvIHJvb3QgY29uIGFjY2VzbyDDum5pY2FtZW50ZSBsb2NhbC4iCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRXN0byBlcyBmw6FjaWwgZGUgaGFjZXIgZGVzZGUgZWwgY2xpZW50ZSBteXNxbCwgZW4gZWwgcXVlIGNyZWFtb3MgdW4gdXN1YXJpbyBjb24gY29udHJhc2XDsWE6IgogICAgICAgICksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgWwogICAgICAgICAgX2MoImNvZGUiLCBbCiAgICAgICAgICAgIF92bS5fdigiPiBjcmVhdGUgdXNlciBsdWNhcyBpZGVudGlmaWVkIGJ5ICdjb250cmFzZcOxYSc7IFxuIiksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZIGEgY29udGludWFjacOzbiBhcGxpY2Ftb3MgcGVybWlzb3Mgc29icmUgdG9kYXMgbGFzIGJhc2VzIGRlIGRhdG9zIHkgbW9kaWZpY2FjacOzbiBkZSBwZXJtaXNvcyBkZSBvdHJvcyB1c3VhcmlvczoiCiAgICAgICAgKSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICI+IGdyYW50IGFsbCBwcml2aWxlZ2VzIG9uICouKiB0byBsdWNhcyB3aXRoIGdyYW50IG9wdGlvbjtcbiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJSZWZyZXNjYW1vcyBsYSB0YWJsYSBkZSBwZXJtaXNvczoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgW19jKCJjb2RlIiwgW192bS5fdigiPiBmbHVzaCBwcml2aWxlZ2VzO1xuIildKV0pLAogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJZIGNlcnJhbW9zIGxhIGNvbmV4acOzbjoiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgW19jKCJjb2RlIiwgW192bS5fdigiPiBleGl0XG4iKV0pXSksCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLy4uL2ltYWdlcy9teXNxbC8xMC5wbmciKSwgYWx0OiAiaW1hZ2UiIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJZIGNvbiBlc3RvIHlhIHRlbmRyw61hbW9zIHRvZG8gbGlzdG8uIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiWSBhc8OtIHBvZHJlbW9zIGFjY2VkZXIgYSBudWVzdHJvIHVzdWFyaW8geWEgY3JlYWRvIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4vLi4vaW1hZ2VzL215c3FsLzExLnBuZyIpLCBhbHQ6ICJpbWFnZSIgfSwKICAgICAgICB9KSwKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIsKhR3JhY2lhcyEiKV0pLAogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}