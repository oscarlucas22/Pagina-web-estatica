{"remainingRequest":"/home/oscar/Descargas/Pagina-web-estatica/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/home/oscar/Descargas/Pagina-web-estatica/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/oscar/Descargas/Pagina-web-estatica/node_modules/vue-loader/lib/index.js??ref--1-1!/home/oscar/Descargas/Pagina-web-estatica/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/guide/django.md?vue&type=template&id=7a9849a0&","dependencies":[{"path":"/home/oscar/Descargas/Pagina-web-estatica/vuepress_web/guide/django.md","mtime":1672333623906},{"path":"/home/oscar/Descargas/Pagina-web-estatica/node_modules/cache-loader/dist/cjs.js","mtime":1665316346093},{"path":"/home/oscar/Descargas/Pagina-web-estatica/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1665316348425},{"path":"/home/oscar/Descargas/Pagina-web-estatica/node_modules/cache-loader/dist/cjs.js","mtime":1665316346093},{"path":"/home/oscar/Descargas/Pagina-web-estatica/node_modules/vue-loader/lib/index.js","mtime":1665316348425},{"path":"/home/oscar/Descargas/Pagina-web-estatica/node_modules/@vuepress/markdown-loader/index.js","mtime":1665316345993}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}