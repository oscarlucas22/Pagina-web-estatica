"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pwaPlugin = void 0;
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const chalk_1 = require("chalk");
const path_1 = require("path");
const compact_1 = require("./compact");
const generateManifest_1 = require("./generateManifest");
const generateServiceWorker_1 = require("./generateServiceWorker");
const helper_1 = require("./helper");
const injectHead_1 = require("./injectHead");
const locales_1 = require("./locales");
const pwaPlugin = (options, context) => {
    (0, compact_1.covertOptions)(options);
    const { base } = context;
    const { shouldPrefetch = true } = context.siteConfig;
    if (options.appendBase)
        (0, helper_1.appendBase)(base, options);
    if (shouldPrefetch === true)
        console.log((0, chalk_1.blue)("PWA:"), chalk_1.black.bgYellow("warn"), 'The plugin will register service worker to handle assets, so we recommend you to set "shouldPrefetch: false" in VuePress config file.');
    const manifest = (0, generateManifest_1.getManifest)(context, options);
    context.siteConfig.head = (0, injectHead_1.injectLinkstoHead)(options, base, context.siteConfig.head);
    const config = {
        name: "@mr-hope/vuepress-plugin-pwa",
        define: () => ({
            PWA_LOCALES: (0, vuepress_shared_1.getLocales)(context, locales_1.pwaLocales, options.locales),
            SW_FORCE_UPDATE: options.update === "force",
            SW_PATH: options.swPath || "service-worker.js",
        }),
        beforeDevServer(app) {
            app.get(`${base || "/"}manifest.webmanifest`, (_req, res) => {
                manifest
                    .then((manifest) => {
                    res.send(manifest);
                })
                    .catch(() => res.status(500).send("Unexpected manifest generate error"));
            });
        },
        generated: async () => {
            await (0, generateManifest_1.generateManifest)(context, manifest);
            await (0, generateServiceWorker_1.generateServiceWorker)(context, options);
        },
        enhanceAppFiles: (0, path_1.resolve)(__dirname, "../client/enhanceAppFile.js"),
        globalUIComponents: [],
    };
    if (options.showInstall !== false)
        config.globalUIComponents.push("PWAInstall");
    if (options.update !== "disable" && options.update !== "force")
        config.globalUIComponents.push(options.updateComponent || "SWUpdatePopup");
    if (options.update === "hint")
        config.globalUIComponents.push(options.hintComponent || "SWHintPopup");
    return config;
};
exports.pwaPlugin = pwaPlugin;
//# sourceMappingURL=plugin.js.map