"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateManifest = exports.getManifest = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const chalk_1 = require("chalk");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const getManifest = async (context, options) => {
    var _a, _b, _c, _d, _e, _f;
    const { base, sourceDir, siteConfig } = context;
    const userManifestPath = (0, path_1.resolve)(sourceDir, "./.vuepress/public/manifest.webmanifest");
    const userManifestJSONPath = (0, path_1.resolve)(sourceDir, "./.vuepress/public/manifest.json");
    const optionManifest = options.manifest || {};
    const userManifest = JSON.parse((0, fs_extra_1.existsSync)(userManifestPath)
        ? await (0, fs_extra_1.readFile)(userManifestPath, "utf8")
        : (0, fs_extra_1.existsSync)(userManifestJSONPath)
            ? await (0, fs_extra_1.readFile)(userManifestJSONPath, "utf8")
            : "{}");
    const finalManifest = {
        name: siteConfig.title || ((_b = (_a = siteConfig.locales) === null || _a === void 0 ? void 0 : _a["/"]) === null || _b === void 0 ? void 0 : _b.title) || "Site",
        short_name: siteConfig.title || ((_d = (_c = siteConfig.locales) === null || _c === void 0 ? void 0 : _c["/"]) === null || _d === void 0 ? void 0 : _d.title) || "Site",
        description: siteConfig.description ||
            ((_f = (_e = siteConfig.locales) === null || _e === void 0 ? void 0 : _e["/"]) === null || _f === void 0 ? void 0 : _f.description) ||
            "A site built with vuepress",
        lang: (0, vuepress_shared_1.getRootLang)(context),
        start_url: base,
        scope: base,
        display: "standalone",
        theme_color: options.themeColor || "#46bd87",
        background_color: "#ffffff",
        orientation: "portrait-primary",
        prefer_related_applications: false,
        ...userManifest,
        ...optionManifest,
    };
    return finalManifest;
};
exports.getManifest = getManifest;
const generateManifest = async (context, manifest) => {
    console.log((0, chalk_1.blue)("PWA:"), chalk_1.black.bgYellow("wait"), "Generating manifest.webmanifest...");
    const { cwd, outDir } = context;
    const manifestPath = (0, path_1.resolve)(outDir, "manifest.webmanifest");
    await (0, fs_extra_1.writeJSON)(manifestPath, await manifest, {
        flag: "w",
    });
    console.log((0, chalk_1.blue)("PWA:"), chalk_1.black.bgGreen("Success"), `Manifest generated and saved to ${(0, chalk_1.cyan)((0, path_1.relative)(cwd, manifestPath))}`);
};
exports.generateManifest = generateManifest;
//# sourceMappingURL=generateManifest.js.map