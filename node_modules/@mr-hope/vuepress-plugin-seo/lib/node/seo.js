"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRobotsTxt = exports.appendSEO = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const chalk_1 = require("chalk");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const inject_1 = require("./inject");
const meta_1 = require("./meta");
const appendSEO = (page, options, context) => {
    const meta = page.frontmatter.meta || [];
    const defaultOGP = (0, meta_1.getOGP)(page, options, context);
    const ogpContent = options.seo
        ? options.seo(defaultOGP, page, context)
        : defaultOGP;
    (0, inject_1.addOGP)(meta, ogpContent);
    if (options.customMeta)
        options.customMeta(meta, page, context);
    page.frontmatter.meta = meta;
};
exports.appendSEO = appendSEO;
const generateRobotsTxt = async ({ cwd, outDir, sourceDir, }) => {
    console.log((0, chalk_1.blue)("SEO:"), chalk_1.black.bgYellow("wait"), "Generating robots.txt");
    const publicPath = (0, path_1.join)(sourceDir, ".vuepress/public/robots.txt");
    let content = (0, fs_extra_1.existsSync)(publicPath)
        ? await (0, fs_extra_1.readFile)(publicPath, { encoding: "utf8" })
        : "";
    if (content && !content.includes("User-agent")) {
        console.error((0, chalk_1.blue)("SEO:"), chalk_1.black.bgRed("error"), "robots.txt seems invalid!");
    }
    else {
        content += "\nUser-agent:*\nDisallow:\n";
        await (0, fs_extra_1.writeFile)((0, path_1.join)(outDir, "robots.txt"), content, {
            flag: "w",
        });
        console.log((0, chalk_1.blue)("SEO:"), chalk_1.black.bgGreen("Success"), `${(0, chalk_1.cyan)("robots.txt")} generated and saved to ${(0, chalk_1.cyan)((0, path_1.relative)(cwd, outDir))}`);
    }
};
exports.generateRobotsTxt = generateRobotsTxt;
//# sourceMappingURL=seo.js.map