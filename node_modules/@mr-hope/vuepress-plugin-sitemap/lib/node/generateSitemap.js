"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSiteMap = void 0;
const chalk_1 = require("chalk");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const sitemap_1 = require("sitemap");
const stripLocalePrefix = (page) => ({
    defaultPath: page.path.replace(page._localePath, "/"),
    pathLocale: page._localePath,
});
const generatePageMap = (options, { base, pages, siteConfig }) => {
    const { changefreq, excludeUrls = ["/404.html"], modifyTimeGetter = (page) => page.updateTimeStamp ? new Date(page.updateTimeStamp).toISOString() : "", } = options;
    const { locales = {} } = siteConfig;
    const pageLocalesMap = pages.reduce((map, page) => {
        const { defaultPath, pathLocale } = stripLocalePrefix(page);
        const pathLocales = map.get(defaultPath) || [];
        pathLocales.push(pathLocale);
        return map.set(defaultPath, pathLocales);
    }, 
    // a map with keys of defaultPath and string[] value with pathLocales
    new Map());
    const pagesMap = new Map();
    pages.forEach((page) => {
        const frontmatterOptions = page.frontmatter["sitemap"] || {};
        const metaRobots = (page.frontmatter.meta || []).find((meta) => meta.name === "robots");
        const excludePage = metaRobots
            ? (metaRobots.content || "")
                .split(/,/u)
                .map((content) => content.trim())
                .includes("noindex")
            : frontmatterOptions.exclude;
        if (excludePage || excludeUrls.includes(page.path))
            return;
        const lastmodifyTime = modifyTimeGetter(page);
        const { defaultPath } = stripLocalePrefix(page);
        const relatedLocales = pageLocalesMap.get(defaultPath) || [];
        let links = [];
        if (relatedLocales.length > 1) {
            links = relatedLocales.map((localePrefix) => {
                var _a;
                return ({
                    lang: ((_a = locales[localePrefix]) === null || _a === void 0 ? void 0 : _a.lang) || "en",
                    url: `${base}${defaultPath
                        .replace(/^\//u, localePrefix)
                        .replace(/\/$/, "")}`,
                });
            });
        }
        const sitemapInfo = {
            ...(changefreq ? { changefreq } : {}),
            links,
            ...(lastmodifyTime ? { lastmod: lastmodifyTime } : {}),
            ...frontmatterOptions,
        };
        pagesMap.set(page.path, sitemapInfo);
    });
    return pagesMap;
};
const generateSiteMap = async (options, context) => {
    const { extraUrls = [], xmlNameSpace: xmlns } = options;
    const hostname = options.hostname.replace(/\/$/, "");
    const sitemapFilename = options.sitemapFilename
        ? options.sitemapFilename.replace(/^\//, "")
        : "sitemap.xml";
    console.log((0, chalk_1.blue)("Sitemap:"), chalk_1.black.bgYellow("wait"), "Generating sitemap...");
    const { base, cwd, outDir } = context;
    const sitemap = new sitemap_1.SitemapStream({
        hostname,
        ...(xmlns ? { xmlns } : {}),
    });
    const pagesMap = generatePageMap(options, context);
    const sitemapXMLPath = (0, path_1.resolve)(outDir, sitemapFilename);
    const writeStream = (0, fs_extra_1.createWriteStream)(sitemapXMLPath);
    sitemap.pipe(writeStream);
    pagesMap.forEach((page, path) => sitemap.write({
        url: `${base}${path.replace(/^\//, "")}`,
        ...page,
    }));
    extraUrls.forEach((item) => sitemap.write({ url: `${base}${item.replace(/^\//, "")}` }));
    await new Promise((resolve) => {
        sitemap.end(() => {
            resolve();
            console.log((0, chalk_1.blue)("Sitemap:"), chalk_1.black.bgGreen("Success"), `Sitemap generated and saved to ${(0, chalk_1.cyan)((0, path_1.relative)(cwd, sitemapXMLPath))}`);
        });
    });
    const robotTxtPath = (0, path_1.resolve)(outDir, "robots.txt");
    if ((0, fs_extra_1.existsSync)(robotTxtPath)) {
        const robotsTxt = await (0, fs_extra_1.readFile)(robotTxtPath, { encoding: "utf8" });
        const newRobotsTxtContent = `${robotsTxt.replace(/^Sitemap: .*$/u, "")}\nSitemap: ${hostname}${base}${sitemapFilename}\n`;
        await (0, fs_extra_1.writeFile)(robotTxtPath, newRobotsTxtContent, { flag: "w" });
        console.log((0, chalk_1.blue)("Sitemap:"), chalk_1.black.bgGreen("Success"), `Appended sitemap path to ${(0, chalk_1.cyan)("robots.txt")}`);
    }
};
exports.generateSiteMap = generateSiteMap;
//# sourceMappingURL=generateSitemap.js.map