"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFeedLinks = exports.getFilename = exports.getFeedChannelOption = exports.getFeedOptions = exports.checkOutput = exports.ensureHostName = void 0;
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const utils_1 = require("./utils");
const ensureHostName = (options) => {
    // make sure hostname do not end with `/`
    if (options.hostname) {
        options.hostname = options.hostname.replace(/\/$/u, "");
        return true;
    }
    return false;
};
exports.ensureHostName = ensureHostName;
const checkOutput = (options) => 
// some locales request output
(options.locales &&
    Object.entries(options.locales).some(([, { atom, json, rss }]) => atom || json || rss)) ||
    // root option requsts output
    Boolean(options.atom || options.json || options.rss);
exports.checkOutput = checkOutput;
const getFeedOptions = (context, options) => Object.fromEntries(Object.keys({
    // root locale must exists
    // eslint-disable-next-line @typescript-eslint/naming-convention
    "/": {},
    ...context.siteConfig.locales,
}).map((localePath) => {
    var _a;
    return [
        localePath,
        {
            // default values
            filter: ({ frontmatter, _filePath }) => !(frontmatter["home"] ||
                !_filePath ||
                frontmatter["article"] === false ||
                frontmatter["feed"] === false),
            sorter: (pageA, pageB) => (0, utils_1.compareDate)(pageA.createTimeStamp
                ? new Date(pageA.createTimeStamp)
                : pageA.frontmatter.time, pageB.createTimeStamp
                ? new Date(pageB.createTimeStamp)
                : pageB.frontmatter.time),
            ...options,
            ...(_a = options.locales) === null || _a === void 0 ? void 0 : _a[localePath],
            // make sure hostname is not been overrided
            hostname: options.hostname,
        },
    ];
}));
exports.getFeedOptions = getFeedOptions;
const getFeedChannelOption = (context, options, localePath = "") => {
    var _a, _b, _c, _d, _e, _f, _g;
    const { base, siteConfig: { title, description, locales = {} }, } = context;
    const { hostname, icon, image } = options;
    const author = (_b = (_a = options.channel) === null || _a === void 0 ? void 0 : _a.author) === null || _b === void 0 ? void 0 : _b.name;
    const defaultChannelOpion = {
        title: ((_c = locales[localePath]) === null || _c === void 0 ? void 0 : _c.title) || title || ((_d = locales["/"]) === null || _d === void 0 ? void 0 : _d.title) || "",
        link: (0, utils_1.resolveUrl)(hostname, base, localePath),
        description: ((_e = locales[localePath]) === null || _e === void 0 ? void 0 : _e.description) ||
            description ||
            ((_f = locales["/"]) === null || _f === void 0 ? void 0 : _f.description) ||
            "",
        language: ((_g = locales[localePath]) === null || _g === void 0 ? void 0 : _g.lang) || (0, vuepress_shared_1.getRootLang)(context),
        copyright: author ? `Copyright by ${author}` : "",
        pubDate: new Date(),
        lastUpdated: new Date(),
        ...(icon ? { icon } : {}),
        ...(image ? { image } : {}),
        ...(author ? { author: { name: author } } : {}),
    };
    return (0, vuepress_shared_1.deepAssign)(defaultChannelOpion, options.channel || {});
};
exports.getFeedChannelOption = getFeedChannelOption;
const getFilename = (options, prefix = "/") => ({
    atomOutputFilename: `${prefix.replace(/^\//, "")}${options.atomOutputFilename || "atom.xml"}`,
    jsonOutputFilename: `${prefix.replace(/^\//, "")}${options.jsonOutputFilename || "feed.json"}`,
    rssOutputFilename: `${prefix.replace(/^\//, "")}${options.rssOutputFilename || "rss.xml"}`,
});
exports.getFilename = getFilename;
const getFeedLinks = (context, options) => {
    const { base } = context;
    const { hostname } = options;
    const { atomOutputFilename, jsonOutputFilename, rssOutputFilename } = (0, exports.getFilename)(options);
    return {
        atom: (0, utils_1.resolveUrl)(hostname, base, atomOutputFilename),
        json: (0, utils_1.resolveUrl)(hostname, base, jsonOutputFilename),
        rss: (0, utils_1.resolveUrl)(hostname, base, rssOutputFilename),
    };
};
exports.getFeedLinks = getFeedLinks;
//# sourceMappingURL=options.js.map