"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedGenerator = void 0;
const chalk_1 = require("chalk");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const feed_1 = require("./feed");
const options_1 = require("./options");
const page_1 = require("./page");
const utils_1 = require("./utils");
class FeedGenerator {
    constructor(context, options) {
        this.context = context;
        this.options = options;
        this.feedMap = Object.fromEntries(Object.entries(options).map(([localePath, localeOptions]) => {
            return [
                localePath,
                new feed_1.Feed({
                    channel: (0, options_1.getFeedChannelOption)(context, localeOptions, localePath),
                    links: (0, options_1.getFeedLinks)(context, localeOptions),
                }),
            ];
        }));
    }
    addPages(localePath) {
        const feed = this.feedMap[localePath];
        const localeOption = this.options[localePath];
        const { count: feedCount = 100, filter = ({ frontmatter, _filePath }) => !(frontmatter["home"] ||
            !_filePath ||
            frontmatter["article"] === false ||
            frontmatter["feed"] === false), sorter = (pageA, pageB) => (0, utils_1.compareDate)(pageA.createTimeStamp
            ? new Date(pageA.createTimeStamp)
            : pageA.frontmatter.time, pageB.createTimeStamp
            ? new Date(pageB.createTimeStamp)
            : pageB.frontmatter.time), } = localeOption;
        const pages = this.context.pages
            .filter((page) => page._localePath === localePath)
            .filter(filter)
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            .sort(sorter)
            .slice(0, feedCount);
        let count = 0;
        for (const page of pages) {
            const item = new page_1.FeedPage(this.context, localeOption, page, feed).getFeedItem();
            if (item) {
                feed.addItem(item);
                count += 1;
            }
        }
        (0, utils_1.success)(`added ${(0, chalk_1.cyan)(`${count} page(s)`)} as feed item(s) in route ${(0, chalk_1.cyan)(localePath)}`);
    }
    async generateFeed() {
        const { outDir } = this.context;
        await Promise.all(Object.entries(this.options).map(async ([localePath, localeOptions]) => {
            // current locale has valid output
            if (localeOptions.atom || localeOptions.json || localeOptions.rss) {
                const feed = this.feedMap[localePath];
                const { atomOutputFilename, jsonOutputFilename, rssOutputFilename } = (0, options_1.getFilename)(localeOptions, localePath);
                this.addPages(localePath);
                // generate atom files
                if (localeOptions.atom) {
                    const filePath = (0, path_1.resolve)(outDir, atomOutputFilename);
                    await (0, fs_extra_1.ensureDir)((0, path_1.dirname)(filePath));
                    await (0, fs_extra_1.outputFile)(filePath, feed.atom());
                    (0, utils_1.success)(`Atom feed file generated and saved to ${(0, chalk_1.cyan)(atomOutputFilename)}`);
                }
                // generate json files
                if (localeOptions.json) {
                    const filePath = (0, path_1.resolve)(outDir, jsonOutputFilename);
                    await (0, fs_extra_1.ensureDir)((0, path_1.dirname)(filePath));
                    await (0, fs_extra_1.outputFile)(filePath, feed.json());
                    (0, utils_1.success)(`JSON feed file generated and saved to ${(0, chalk_1.cyan)(jsonOutputFilename)}`);
                }
                // generate rss files
                if (localeOptions.rss) {
                    const filePath = (0, path_1.resolve)(outDir, rssOutputFilename);
                    await (0, fs_extra_1.ensureDir)((0, path_1.dirname)(filePath));
                    await (0, fs_extra_1.outputFile)(filePath, feed.rss());
                    (0, utils_1.success)(`RSS feed file generated and saved to ${(0, chalk_1.cyan)(rssOutputFilename)}`);
                }
            }
        }));
    }
}
exports.FeedGenerator = FeedGenerator;
//# sourceMappingURL=generator.js.map