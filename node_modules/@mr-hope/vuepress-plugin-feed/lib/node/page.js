"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedPage = void 0;
const utils_1 = require("./utils");
class FeedPage {
    constructor(context, options, $page, feed) {
        this.context = context;
        this.options = options;
        this.$page = $page;
        this.feed = feed;
        this.base = this.context.base;
        this.frontmatter = $page.frontmatter;
        this.getter = options.getter || {};
        this.pageFeedOptions = this.frontmatter.feed || {};
    }
    /** Get current page */
    get page() {
        return this.context.pages.find((page) => page.key === this.$page.key);
    }
    get title() {
        if (typeof this.getter.title === "function")
            return this.getter.title(this.page);
        return this.pageFeedOptions.title || this.page.title;
    }
    /** real url */
    get link() {
        if (typeof this.getter.link === "function")
            return this.getter.link(this.page);
        return (0, utils_1.resolveUrl)(this.options.hostname, this.base, this.page.path);
    }
    get description() {
        if (typeof this.getter.description === "function")
            return this.getter.description(this.page);
        if (this.pageFeedOptions.description)
            return this.pageFeedOptions.description;
        if (this.frontmatter.description)
            return this.frontmatter.description;
        if (this.page.excerpt)
            return `html:${(0, utils_1.resolveHTML)(this.context.markdown.render(this.page.excerpt).html, this.options.customElements)}`;
        return null;
    }
    get author() {
        var _a, _b;
        if (typeof this.getter.author === "function")
            return this.getter.author(this.page);
        if (Array.isArray(this.pageFeedOptions.author))
            return this.pageFeedOptions.author;
        if (typeof this.pageFeedOptions.author === "object")
            return [this.pageFeedOptions.author];
        return this.frontmatter.author === false
            ? []
            : this.frontmatter.author
                ? (0, utils_1.getAuthor)(this.frontmatter.author)
                : ((_a = this.options.channel) === null || _a === void 0 ? void 0 : _a.author)
                    ? (0, utils_1.getAuthor)((_b = this.options.channel) === null || _b === void 0 ? void 0 : _b.author)
                    : [];
    }
    get category() {
        if (typeof this.getter.category === "function")
            return this.getter.category(this.page);
        if (Array.isArray(this.pageFeedOptions.category))
            return this.pageFeedOptions.category;
        if (typeof this.pageFeedOptions.category === "object")
            return [this.pageFeedOptions.category];
        const { category } = this.frontmatter;
        return (0, utils_1.getCategory)(category).map((item) => ({ name: item }));
    }
    get enclosure() {
        if (typeof this.getter.enclosure === "function")
            return this.getter.enclosure(this.page);
        if (this.image)
            return {
                url: this.image,
                type: (0, utils_1.getImageMineType)(this.image.split(".").pop()),
            };
        return null;
    }
    get guid() {
        return this.pageFeedOptions.guid || this.link;
    }
    get pubDate() {
        if (typeof this.getter.publishDate === "function")
            return this.getter.publishDate(this.page);
        const { time, date = time } = this.page.frontmatter;
        const { createTimeStamp } = this.page || {};
        return date && date instanceof Date
            ? date
            : createTimeStamp
                ? new Date(createTimeStamp)
                : null;
    }
    get lastUpdated() {
        if (typeof this.getter.lastUpdateDate === "function")
            return this.getter.lastUpdateDate(this.page);
        const { updateTimeStamp } = this.page || {};
        return updateTimeStamp ? new Date(updateTimeStamp) : new Date();
    }
    get content() {
        var _a;
        if (typeof this.getter.content === "function")
            return this.getter.content(this.page);
        if (this.pageFeedOptions.content)
            return this.pageFeedOptions.content;
        // eslint-disable-next-line no-underscore-dangle
        const { html } = this.context.markdown.render(((_a = this.page) === null || _a === void 0 ? void 0 : _a._strippedContent) || "");
        return (0, utils_1.resolveHTML)(html, this.options.customElements);
    }
    get image() {
        var _a;
        if (typeof this.getter.image === "function")
            return this.getter.image(this.page);
        const banner = this.frontmatter["banner"];
        const cover = this.frontmatter["cover"];
        if (banner) {
            if ((0, utils_1.isAbsoluteUrl)(banner))
                return (0, utils_1.resolveUrl)(this.options.hostname, this.context.base, banner);
            if ((0, utils_1.isUrl)(banner))
                return banner;
        }
        if (cover) {
            if ((0, utils_1.isAbsoluteUrl)(cover))
                return (0, utils_1.resolveUrl)(this.options.hostname, this.context.base, cover);
            if ((0, utils_1.isUrl)(cover))
                return cover;
        }
        const result = /!\[.*?\]\((.*?)\)/iu.exec(((_a = this.page) === null || _a === void 0 ? void 0 : _a._strippedContent) || "");
        if (result) {
            if ((0, utils_1.isAbsoluteUrl)(result[1]))
                return (0, utils_1.resolveUrl)(this.options.hostname, this.context.base, result[1]);
            if ((0, utils_1.isUrl)(result[1]))
                return result[1];
        }
        return null;
    }
    get contributor() {
        if (typeof this.getter.contributor === "function")
            return this.getter.contributor(this.page);
        if (Array.isArray(this.pageFeedOptions.contributor))
            return this.pageFeedOptions.contributor;
        if (typeof this.pageFeedOptions.contributor === "object")
            return [this.pageFeedOptions.contributor];
        return this.author;
    }
    get copyright() {
        if (typeof this.getter.copyright === "function")
            return this.getter.copyright(this.page);
        if (this.frontmatter.copyrightText)
            return this.frontmatter.copyrightText;
        const firstAuthor = this.author[0];
        if (firstAuthor === null || firstAuthor === void 0 ? void 0 : firstAuthor.name)
            return `Copyright by ${firstAuthor.name}`;
        return null;
    }
    getFeedItem() {
        const { author, category, content, contributor, copyright, description, enclosure, guid, image, lastUpdated, link, pubDate, title, } = this;
        // we need at least title or description
        if (!title && !description)
            return null;
        // add category to feed
        if (category)
            category.forEach((item) => this.feed.addCategory(item.name));
        // add contributor to feed
        if (contributor)
            contributor.forEach((item) => this.feed.addContributor(item));
        return {
            title,
            link,
            guid,
            lastUpdated,
            content,
            author,
            contributor,
            ...(description ? { description } : {}),
            ...(category ? { category } : {}),
            ...(enclosure ? { enclosure } : {}),
            ...(pubDate ? { pubDate } : {}),
            ...(image ? { image } : {}),
            ...(copyright ? { copyright } : {}),
        };
    }
}
exports.FeedPage = FeedPage;
//# sourceMappingURL=page.js.map