import Vue from "vue";
import { injectCSS, injectScript, getCode, getReactCode, getNormalCode, getVueCode, loadNormal, loadReact, loadVue, } from "./utils";
import CodePenIcon from "./icons/CodePenIcon.vue";
import JSFiddleIcon from "./icons/JSFiddleIcon.vue";
import LoadingIcon from "./icons/LoadingIcon.vue";
import "balloon-css/balloon.css";
export default Vue.extend({
    name: "CodeDemo",
    components: {
        CodePenIcon,
        JSFiddleIcon,
        LoadingIcon,
    },
    props: {
        id: {
            type: String,
            required: true,
        },
        type: {
            type: String,
            default: "normal",
        },
        title: {
            type: String,
            default: "",
        },
        config: {
            type: String,
            default: "",
        },
        code: {
            type: String,
            required: true,
        },
    },
    data: () => ({
        isExpanded: false,
        height: "0",
        loaded: false,
    }),
    computed: {
        codeConfig() {
            return JSON.parse(decodeURIComponent(this.config || "{}"));
        },
        codeType() {
            const codeConfig = JSON.parse(decodeURIComponent(this.code || "{}"));
            return getCode(codeConfig);
        },
        info() {
            return this.type === "react"
                ? getReactCode(this.codeType, this.codeConfig)
                : this.type === "vue"
                    ? getVueCode(this.codeType, this.codeConfig)
                    : getNormalCode(this.codeType, this.codeConfig);
        },
        isLegal() {
            return this.info.isLegal;
        },
    },
    mounted() {
        setTimeout(() => {
            void this.loadDemo();
        }, MARKDOWN_ENHANCE_DELAY);
    },
    methods: {
        initDom(innerHTML = false) {
            // attach a shadow root to demo
            const shadowRoot = this.$refs["demoWrapper"].attachShadow({
                mode: "open",
            });
            const appElement = document.createElement("div");
            appElement.classList.add("code-demo-app");
            shadowRoot.appendChild(appElement);
            if (this.isLegal) {
                if (innerHTML)
                    appElement.innerHTML = this.info.html;
                injectCSS(shadowRoot, this.info);
                injectScript(this.id, shadowRoot, this.info);
                this.height = "0";
            }
            else
                this.height = "auto";
            this.loaded = true;
        },
        loadDemo() {
            switch (this.type) {
                case "react": {
                    return loadReact(this.info).then(() => this.initDom());
                }
                case "vue": {
                    return loadVue(this.info).then(() => this.initDom());
                }
                default: {
                    return loadNormal(this.info).then(() => this.initDom(true));
                }
            }
        },
        onToggle() {
            this.height = this.isExpanded
                ? "0"
                : `${this.$refs["codeContainer"].clientHeight + 13.8}px`;
            this.isExpanded = !this.isExpanded;
        },
    },
});
//# sourceMappingURL=CodeDemo.js.map