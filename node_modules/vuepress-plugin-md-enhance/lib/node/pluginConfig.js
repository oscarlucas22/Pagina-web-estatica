"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPluginConfig = void 0;
const vuepress_shared_1 = require("@mr-hope/vuepress-shared");
const locales_1 = require("./locales");
const getPluginConfig = (markdownOptions, context) => {
    const containers = [
        "info",
        "note",
        "tip",
        "warning",
        "danger",
    ];
    const locales = (0, vuepress_shared_1.getLocales)(context, locales_1.markdownEnhanceLocales, markdownOptions.locales);
    const getContainterLocale = (key) => Object.fromEntries(Object.keys(locales).map((path) => [path, locales[path][key]]));
    const config = [];
    if (markdownOptions.container || markdownOptions.enableAll)
        config.push(...containers.map((type) => [
            "container",
            { type, defaultTitle: getContainterLocale(type) },
        ]), [
            "container",
            {
                type: "details",
                before: (info) => `<details class="custom-block details"><summary>${info || "Details"}</summary>\n`,
                after: () => "</details>\n",
            },
        ]);
    if (markdownOptions.align || markdownOptions.enableAll)
        config.push(["container", { type: "left", defaultTitle: "" }], ["container", { type: "center", defaultTitle: "" }], ["container", { type: "right", defaultTitle: "" }], ["container", { type: "justify", defaultTitle: "" }]);
    if (markdownOptions.codegroup || markdownOptions.enableAll)
        config.push([
            "container",
            {
                type: "code-group",
                before: () => `<CodeGroup>\n`,
                after: () => "</CodeGroup>\n",
            },
        ], [
            "container",
            {
                type: "code-group-item",
                before: (info) => {
                    const isActive = info.split(":").pop() === "active";
                    return `<CodeGroupItem title="${isActive ? info.replace(/:active$/, "") : info}"${isActive ? " active" : ""}>\n`;
                },
                after: () => "</CodeGroupItem>\n",
            },
        ]);
    return config;
};
exports.getPluginConfig = getPluginConfig;
//# sourceMappingURL=pluginConfig.js.map