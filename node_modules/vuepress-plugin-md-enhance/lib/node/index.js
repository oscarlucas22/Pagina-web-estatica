"use strict";
const path_1 = require("path");
const lineNumbers = require("@vuepress/markdown/lib/lineNumbers");
const markdown_it_1 = require("./markdown-it");
const pluginConfig_1 = require("./pluginConfig");
const noopModule = "@mr-hope/vuepress-shared/lib/esm/noopModule";
const mdEnhancePlugin = (options, context) => {
    const getStatus = (key, gfm = false) => key in options
        ? Boolean(options[key])
        : gfm && "gfm" in options
            ? Boolean(options.gfm)
            : options.enableAll || false;
    const alignEnable = getStatus("align");
    const chartEnable = getStatus("chart");
    const containerEnable = getStatus("container");
    const codegroupEnable = getStatus("codegroup");
    const demoEnable = getStatus("demo");
    const flowchartEnable = getStatus("flowchart");
    const footnoteEnable = getStatus("footnote", true);
    const imageMarkEnable = getStatus("imageMark", true);
    const tasklistEnable = getStatus("tasklist", true);
    const mermaidEnable = getStatus("mermaid");
    const presentationEnable = getStatus("presentation");
    const texEnable = getStatus("tex");
    const katexOptions = {
        macros: {
            // support more symbols
            // eslint-disable-next-line @typescript-eslint/naming-convention
            "\\liiiint": "\\int\\!\\!\\!\\iiint",
            // eslint-disable-next-line @typescript-eslint/naming-convention
            "\\iiiint": "\\int\\!\\!\\!\\!\\iiint",
            // eslint-disable-next-line @typescript-eslint/naming-convention
            "\\idotsint": "\\int\\!\\cdots\\!\\int",
        },
        ...(typeof options.tex === "object" ? options.tex : {}),
    };
    const revealPlugins = typeof options.presentation === "object" &&
        Array.isArray(options.presentation.plugins)
        ? options.presentation.plugins
        : [];
    return {
        name: "md-enhance",
        alias: {
            "@ChartJS": chartEnable
                ? (0, path_1.resolve)(__dirname, "../client/ChartJS.vue")
                : noopModule,
            "@CodeDemo": demoEnable
                ? (0, path_1.resolve)(__dirname, "../client/CodeDemo.vue")
                : noopModule,
            "@CodeGroup": codegroupEnable
                ? (0, path_1.resolve)(__dirname, "../client/CodeGroup.vue")
                : noopModule,
            "@CodeGroupItem": codegroupEnable
                ? (0, path_1.resolve)(__dirname, "../client/CodeGroupItem.vue")
                : noopModule,
            "@FlowChart": flowchartEnable
                ? (0, path_1.resolve)(__dirname, "../client/FlowChart.vue")
                : noopModule,
            "@Mermaid": mermaidEnable
                ? (0, path_1.resolve)(__dirname, "../client/Mermaid.js")
                : noopModule,
            "@Presentation": presentationEnable
                ? (0, path_1.resolve)(__dirname, "../client/Presentation.vue")
                : noopModule,
        },
        define: () => ({
            MARKDOWN_ENHANCE_ALIGN: alignEnable,
            MARKDOWN_ENHANCE_CONTAINER: containerEnable,
            MARKDOWN_ENHANCE_DELAY: options.delay || 500,
            MARKDOWN_ENHANCE_FOOTNOTE: footnoteEnable,
            MARKDOWN_ENHANCE_TASKLIST: tasklistEnable,
            MARKDOWN_ENHANCE_TEX: texEnable,
            CODE_DEMO_OPTIONS: {
                ...markdown_it_1.CODE_DEMO_DEFAULT_SETTING,
                ...(typeof options.demo === "object" ? options.demo : {}),
            },
            MERMAID_OPTIONS: typeof options.mermaid === "object" ? options.mermaid : {},
            REVEAL_CONFIG: typeof options.presentation === "object" &&
                typeof options.presentation.revealConfig === "object"
                ? options.presentation.revealConfig
                : {},
            REVEAL_PLUGIN_HIGHLIGHT: revealPlugins.includes("highlight"),
            REVEAL_PLUGIN_MATH: revealPlugins.includes("math"),
            REVEAL_PLUGIN_NOTES: revealPlugins.includes("notes"),
            REVEAL_PLUGIN_SEARCH: revealPlugins.includes("search"),
            REVEAL_PLUGIN_ZOOM: revealPlugins.includes("zoom"),
        }),
        enhanceAppFiles: (0, path_1.resolve)(__dirname, "../client/enhanceAppFile.js"),
        extendMarkdown: (md) => {
            // hack
            if (options.lineNumbers !== false)
                md.use(lineNumbers);
            if (options.imageFix !== false)
                md.use(markdown_it_1.decodeURL);
            if (getStatus("lazyLoad"))
                md.use(markdown_it_1.lazyLoad);
            if (imageMarkEnable)
                md.use(markdown_it_1.imageMark, typeof options.imageMark === "object" ? options.imageMark : {});
            if (getStatus("sup"))
                md.use(markdown_it_1.sup);
            if (getStatus("sub"))
                md.use(markdown_it_1.sub);
            if (footnoteEnable)
                md.use(markdown_it_1.footnote);
            if (flowchartEnable) {
                md.use(markdown_it_1.flowchart);
                md.use(markdown_it_1.legacyFlowchart);
            }
            if (getStatus("mark"))
                md.use(markdown_it_1.mark);
            if (tasklistEnable)
                md.use(markdown_it_1.tasklist, [
                    typeof options.tasklist === "object" ? options.tasklist : {},
                ]);
            if (chartEnable)
                md.use(markdown_it_1.chart);
            if (demoEnable) {
                md.use(markdown_it_1.normalDemo);
                md.use(markdown_it_1.vueDemo);
                md.use(markdown_it_1.reactDemo);
                md.use(markdown_it_1.legacyCodeDemo);
            }
            if (getStatus("include"))
                md.use(markdown_it_1.include, [
                    typeof options.include === "function" ? options.include : undefined,
                ]);
            if (mermaidEnable)
                md.use(markdown_it_1.mermaid);
            if (texEnable)
                md.use(markdown_it_1.katex, katexOptions);
            if (presentationEnable)
                md.use(markdown_it_1.presentation);
            if (getStatus("stylize"))
                md.use(markdown_it_1.stylize, options.stylize);
        },
        plugins: (0, pluginConfig_1.getPluginConfig)(options, context),
    };
};
module.exports = mdEnhancePlugin;
//# sourceMappingURL=index.js.map