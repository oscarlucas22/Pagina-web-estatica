"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.legacyCodeDemo = exports.reactDemo = exports.vueDemo = exports.normalDemo = exports.CODE_DEMO_DEFAULT_SETTING = void 0;
const hash = require("hash-sum");
const container_1 = require("./container");
exports.CODE_DEMO_DEFAULT_SETTING = {
    useBabel: false,
    jsLib: [],
    cssLib: [],
    codepenLayout: "left",
    codepenEditors: "101",
    babel: "https://unpkg.com/@babel/standalone/babel.min.js",
    vue: "https://unpkg.com/vue@2/dist/vue.min.js",
    react: "https://unpkg.com/react/umd/react.production.min.js",
    reactDOM: "https://unpkg.com/react-dom/umd/react-dom.production.min.js",
};
const getPlugin = (name) => (md) => (0, container_1.container)(md, {
    name,
    openRender: (tokens, index) => {
        const title = tokens[index].info.trimStart().slice(name.length).trim();
        let config = "";
        const code = {};
        for (let i = index; i < tokens.length; i++) {
            const { type, content, info } = tokens[i];
            if (type === `container_${name}_close`)
                break;
            if (!content)
                continue;
            if (type === "fence") {
                if (info === "json")
                    config = encodeURIComponent(content);
                else
                    code[info] = content;
            }
        }
        return `
<CodeDemo id="code-demo-${hash(code)}" type="${name.split("-")[0]}"${title ? ` title="${encodeURIComponent(title)}"` : ""}${config ? ` config="${config}"` : ""} code="${encodeURIComponent(JSON.stringify(code))}">
`;
    },
    closeRender: () => `</CodeDemo>`,
});
exports.normalDemo = getPlugin("normal-demo");
exports.vueDemo = getPlugin("vue-demo");
exports.reactDemo = getPlugin("react-demo");
/** @deprecated */
const legacyCodeDemo = (md) => {
    (0, container_1.container)(md, {
        name: "demo",
        openRender: (tokens, index) => {
            console.warn('Deprecated demo container detected, please use "normal-demo", "vue-demo" or "react-demo" container.');
            const { info } = tokens[index];
            const title = /^ demo\s*(?:\[.*?\])?\s*(.*)\s*$/u.exec(info);
            const type = /\[(.*)\]/u.exec(info);
            let config = "";
            const code = {};
            for (let i = index; i < tokens.length; i++) {
                const { type, content, info } = tokens[i];
                if (type === `container_demo_close`)
                    break;
                if (!content)
                    continue;
                if (type === "fence") {
                    if (info === "json")
                        config = encodeURIComponent(content);
                    else
                        code[info] = content;
                }
            }
            return `
<CodeDemo id="code-demo-${hash(code)}" type="${(type === null || type === void 0 ? void 0 : type[1]) || "normal"}"${title ? ` title="${encodeURIComponent(title[1])}"` : ""}${config ? ` config="${config}"` : ""} code="${encodeURIComponent(JSON.stringify(code))}">
`;
        },
        closeRender: () => `</CodeDemo>`,
    });
};
exports.legacyCodeDemo = legacyCodeDemo;
//# sourceMappingURL=codeDemo.js.map