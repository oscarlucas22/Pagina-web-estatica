"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.escapeHtml = exports.isListItemToken = exports.isParagraphToken = exports.isInlineToken = exports.getParentTokenIndex = exports.setTokenAttr = exports.UNESCAPE_RE = exports.NEWLINES_RE = void 0;
// https://spec.commonmark.org/0.29/#line-ending
exports.NEWLINES_RE = /\r\n?|\n/g;
exports.UNESCAPE_RE = /\\([ \\!"#$%&'()*+,./:;<=>?@[\]^_`{|}~-])/gu;
const setTokenAttr = (token, name, value) => {
    const index = token.attrIndex(name);
    const attr = [name, value];
    if (index < 0)
        token.attrPush(attr);
    else
        token.attrs[index] = attr;
};
exports.setTokenAttr = setTokenAttr;
const getParentTokenIndex = (tokens, index) => {
    const targetLevel = tokens[index].level - 1;
    for (let i = index - 1; i >= 0; i--)
        if (tokens[i].level === targetLevel)
            return i;
    return -1;
};
exports.getParentTokenIndex = getParentTokenIndex;
const isInlineToken = (token) => (token === null || token === void 0 ? void 0 : token.type) === "inline";
exports.isInlineToken = isInlineToken;
const isParagraphToken = (token) => (token === null || token === void 0 ? void 0 : token.type) === "paragraph_open";
exports.isParagraphToken = isParagraphToken;
const isListItemToken = (token) => (token === null || token === void 0 ? void 0 : token.type) === "list_item_open";
exports.isListItemToken = isListItemToken;
const escapeHtml = (unsafeHTML) => unsafeHTML
    .replace(/&/gu, "&amp;")
    .replace(/</gu, "&lt;")
    .replace(/>/gu, "&gt;")
    .replace(/"/gu, "&quot;")
    .replace(/'/gu, "&#039;");
exports.escapeHtml = escapeHtml;
//# sourceMappingURL=utils.js.map